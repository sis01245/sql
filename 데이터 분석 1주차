데이터 분석 프로세스
데이터 수집 > 전처리 > 탐색적 데이터 분석 > 예측 모델 만들기

- colab 사용 팁
  긴 설명 사용 시엔 ''' 사용
  데이터 타입 확인할 땐 type(변수명)
  
  리스트 함수
  .append(A) 는 리스트 마지막에 A를 추가할 때 사용
  .extend(리스트A)은 기존 리스트 뒷부분에 리스트A를 추가
  
  for 반복문
  for 임시변수 in 대상:
    명령어
  로 작성
  
  if 조건문
  if 조건 :
    결과 행동
  로 작성  
  
  range 함수 - range(0,5) 사용 시 [0,1,2,3,4] 출력
  
  !!!함수 만들기
  def 함수명(함수 변수1, 변수2, ...):
    수행할 코드
    return 최종 결과
  
  !!!class 만들기(틀 만들기)
  class Monster():
    hp = 100
    mp = 10
    
      def damage(self, attack):
        self.hp = self.hp-attack
    이런 식으로 틀을 만들고
    monster1 = Monster()
    monster1.damage(120)
    이런 식으로 몬스터1 만들기와 데미지 계산을 간단하게 가능
    class 내부 함수는 객체.내부함수() 식으로 사용 가능
    
  !!!Try~except 예외문 - ~를 시도해보고 에러가 나오면 예외문을 출력하도록
  try:
    명령문
  except:
    예외문
    
  !!!판다스와 데이터 프레임, 패키지
  패키지 - 다른 누군가가 이미 만들어놓은 함수, 클래스 덩어리. import로 불러옴
  판다스 - 데이터 프레임 형태의 데이터를 분석하기에 용이한 패키지
    
  import pandas as 내가 정할 이름
  이런 식으로 불러옴
  일반적으로는
  import pandas as pd 로 사용
     
  데이터 프레임은 딕셔너리 형태 items = {'A' : [~,~,~]}의 데이터를 만든 후 
  데이터프레임명 = pd.DataFrame(items) 식으로 만들 수 있음
  
  판다스 데이터프레임 함수
  - df.head() : 상위 5개 행만 출력
  - df.tail() : 하위 5개 행만 출력
  - df.sample(~) : 무작위 ~개의 행을 출력
  - pd.concat([df1, df2] : df1과 df2를 합쳐줌
  - df.to_csv('파일명.csv', index = False) : df의 데이터를 csv파일로 저장. index=False를 추가하면 데이터의 index부분은 csv에 저장 안됨
  - new_df = pd.read_table('파일명.csv', sep=',') : 파일명.csv를 new_df로 읽어들이고, sep부분은 ,로 표기
